function [rgbImage] = ReproductionOnStructure(queryImageLab)

load colorBase.mat colorBase
load dataBase.mat dataBase

disp('Calculating reproduction image...');

sizeDatabase = numel(colorBase); 

% ---------------- Colors in LAB for all the regions ----------------

targetColors = zeros(200, 3);

for q = 1:sizeDatabase
    targetColors(q, 1) = mean(colorBase{q}.L(:));
    targetColors(q, 2) = mean(colorBase{q}.A(:));
    targetColors(q, 3) = mean(colorBase{q}.B(:));
end

queryImageLab = im2double(queryImageLab);

gridSize = 25; 
numRows = size(queryImageLab, 1) / gridSize;
numCols = size(queryImageLab, 2) / gridSize;

% -------------- Find the images matching best for colors --------------

for i = 1:numRows
    for j = 1:numCols
        
        % Grid region
        replaceRegionRows = (i-1)*gridSize+1 : i*gridSize;
        replaceRegionCols = (j-1)*gridSize+1 : j*gridSize;
        
        % LAB in current grid region
        L_Region = queryImageLab(replaceRegionRows, replaceRegionCols, 1);
        A_Region = queryImageLab(replaceRegionRows, replaceRegionCols, 2);
        B_Region = queryImageLab(replaceRegionRows, replaceRegionCols, 3);
        
        currentColor = [mean(L_Region(:)),  mean(A_Region(:)), mean(B_Region(:))];

        bestMatchIndices = zeros(50,1);
        counter = 1;

        % Calculate Euclidean distance for each image
        for q = 1:sizeDatabase
            targetColor = targetColors(q, :);
            distance = norm(currentColor - targetColor);

            if 30 < distance
                bestMatchIndices(counter) = q;
                counter = counter + 1; 
            end   
        end

        % Retrieve the corresponding elements from dataBase
        bestMatches = []; 
        
        dataBase(bestMatchIndices);
        
        for v=1:length(bestMatchIndices)
            
            bestMatches = dataBase(bestMatchIndices(v));
            
        end 

% -------------------- Decide on structure --------------------
        
        bestMatchesGray = zeros(50,1);
        
        for u = 1:length(bestMatches) 
            
            bestMatchesGray(u) = lab2rgb(bestMatches(u)); 
            bestMatchesGray(u) = im2gray(bestMatchesGray(u));
            
        end 
        
        finalReplacement = inf; 
        
        queryImage = lab2rgb(queryImageLab); 
        queryImageGray = im2gray(queryImage);
        
        currentMatchDistance = inf; 
        
        for k = 1:length(bestMatchesGray) 
            
            ssimval = ssim(bestMatches(k),queryImageGray(replaceRegionRows,replaceRegionCols)); 
            
           
            if currentMatchDistance > ssimval
                
                  finalReplacement = bestMatches(k); 
                
            end 
        end 
         
        % Resize image based on region size and place the small image by LAB channels 
        Pixel_Image = imresize(bestMatches(k).L, [numel(replaceRegionRows), numel(replaceRegionCols)]);
        queryImageLab(replaceRegionRows, replaceRegionCols, 1) = Pixel_Image;
        
        Pixel_Image = imresize(bestMatches(k).A, [numel(replaceRegionRows), numel(replaceRegionCols)]);
        queryImageLab(replaceRegionRows, replaceRegionCols, 2) = Pixel_Image;
        
        Pixel_Image = imresize(bestMatches(k).B, [numel(replaceRegionRows), numel(replaceRegionCols)]);
        queryImageLab(replaceRegionRows, replaceRegionCols, 3) = Pixel_Image;


    end
end

rgbImage = lab2rgb(queryImageLab); 

end



